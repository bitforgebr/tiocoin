// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chain.proto

#ifndef PROTOBUF_chain_2eproto__INCLUDED
#define PROTOBUF_chain_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_chain_2eproto();
void protobuf_AssignDesc_chain_2eproto();
void protobuf_ShutdownFile_chain_2eproto();

class pb_transaction;
class pb_challenge;
class pb_chain;

// ===================================================================

class pb_transaction : public ::google::protobuf::Message {
 public:
  pb_transaction();
  virtual ~pb_transaction();

  pb_transaction(const pb_transaction& from);

  inline pb_transaction& operator=(const pb_transaction& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pb_transaction& default_instance();

  void Swap(pb_transaction* other);

  // implements Message ----------------------------------------------

  pb_transaction* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pb_transaction& from);
  void MergeFrom(const pb_transaction& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:pb_transaction)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_;
  friend void  protobuf_AddDesc_chain_2eproto();
  friend void protobuf_AssignDesc_chain_2eproto();
  friend void protobuf_ShutdownFile_chain_2eproto();

  void InitAsDefaultInstance();
  static pb_transaction* default_instance_;
};
// -------------------------------------------------------------------

class pb_challenge : public ::google::protobuf::Message {
 public:
  pb_challenge();
  virtual ~pb_challenge();

  pb_challenge(const pb_challenge& from);

  inline pb_challenge& operator=(const pb_challenge& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pb_challenge& default_instance();

  void Swap(pb_challenge* other);

  // implements Message ----------------------------------------------

  pb_challenge* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pb_challenge& from);
  void MergeFrom(const pb_challenge& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string question = 1;
  inline bool has_question() const;
  inline void clear_question();
  static const int kQuestionFieldNumber = 1;
  inline const ::std::string& question() const;
  inline void set_question(const ::std::string& value);
  inline void set_question(const char* value);
  inline void set_question(const char* value, size_t size);
  inline ::std::string* mutable_question();
  inline ::std::string* release_question();
  inline void set_allocated_question(::std::string* question);

  // optional string answer = 2;
  inline bool has_answer() const;
  inline void clear_answer();
  static const int kAnswerFieldNumber = 2;
  inline const ::std::string& answer() const;
  inline void set_answer(const ::std::string& value);
  inline void set_answer(const char* value);
  inline void set_answer(const char* value, size_t size);
  inline ::std::string* mutable_answer();
  inline ::std::string* release_answer();
  inline void set_allocated_answer(::std::string* answer);

  // @@protoc_insertion_point(class_scope:pb_challenge)
 private:
  inline void set_has_question();
  inline void clear_has_question();
  inline void set_has_answer();
  inline void clear_has_answer();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* question_;
  ::std::string* answer_;
  friend void  protobuf_AddDesc_chain_2eproto();
  friend void protobuf_AssignDesc_chain_2eproto();
  friend void protobuf_ShutdownFile_chain_2eproto();

  void InitAsDefaultInstance();
  static pb_challenge* default_instance_;
};
// -------------------------------------------------------------------

class pb_chain : public ::google::protobuf::Message {
 public:
  pb_chain();
  virtual ~pb_chain();

  pb_chain(const pb_chain& from);

  inline pb_chain& operator=(const pb_chain& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pb_chain& default_instance();

  void Swap(pb_chain* other);

  // implements Message ----------------------------------------------

  pb_chain* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pb_chain& from);
  void MergeFrom(const pb_chain& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional string state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline const ::std::string& state() const;
  inline void set_state(const ::std::string& value);
  inline void set_state(const char* value);
  inline void set_state(const char* value, size_t size);
  inline ::std::string* mutable_state();
  inline ::std::string* release_state();
  inline void set_allocated_state(::std::string* state);

  // repeated .pb_transaction transaction = 3;
  inline int transaction_size() const;
  inline void clear_transaction();
  static const int kTransactionFieldNumber = 3;
  inline const ::pb_transaction& transaction(int index) const;
  inline ::pb_transaction* mutable_transaction(int index);
  inline ::pb_transaction* add_transaction();
  inline const ::google::protobuf::RepeatedPtrField< ::pb_transaction >&
      transaction() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb_transaction >*
      mutable_transaction();

  // optional .pb_challenge challenge = 4;
  inline bool has_challenge() const;
  inline void clear_challenge();
  static const int kChallengeFieldNumber = 4;
  inline const ::pb_challenge& challenge() const;
  inline ::pb_challenge* mutable_challenge();
  inline ::pb_challenge* release_challenge();
  inline void set_allocated_challenge(::pb_challenge* challenge);

  // @@protoc_insertion_point(class_scope:pb_chain)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_challenge();
  inline void clear_has_challenge();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* state_;
  ::google::protobuf::RepeatedPtrField< ::pb_transaction > transaction_;
  ::pb_challenge* challenge_;
  ::google::protobuf::int32 id_;
  friend void  protobuf_AddDesc_chain_2eproto();
  friend void protobuf_AssignDesc_chain_2eproto();
  friend void protobuf_ShutdownFile_chain_2eproto();

  void InitAsDefaultInstance();
  static pb_chain* default_instance_;
};
// ===================================================================


// ===================================================================

// pb_transaction

// optional string id = 1;
inline bool pb_transaction::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pb_transaction::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pb_transaction::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pb_transaction::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& pb_transaction::id() const {
  // @@protoc_insertion_point(field_get:pb_transaction.id)
  return *id_;
}
inline void pb_transaction::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:pb_transaction.id)
}
inline void pb_transaction::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_transaction.id)
}
inline void pb_transaction::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_transaction.id)
}
inline ::std::string* pb_transaction::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_transaction.id)
  return id_;
}
inline ::std::string* pb_transaction::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_transaction::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_transaction.id)
}

// -------------------------------------------------------------------

// pb_challenge

// optional string question = 1;
inline bool pb_challenge::has_question() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pb_challenge::set_has_question() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pb_challenge::clear_has_question() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pb_challenge::clear_question() {
  if (question_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    question_->clear();
  }
  clear_has_question();
}
inline const ::std::string& pb_challenge::question() const {
  // @@protoc_insertion_point(field_get:pb_challenge.question)
  return *question_;
}
inline void pb_challenge::set_question(const ::std::string& value) {
  set_has_question();
  if (question_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    question_ = new ::std::string;
  }
  question_->assign(value);
  // @@protoc_insertion_point(field_set:pb_challenge.question)
}
inline void pb_challenge::set_question(const char* value) {
  set_has_question();
  if (question_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    question_ = new ::std::string;
  }
  question_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_challenge.question)
}
inline void pb_challenge::set_question(const char* value, size_t size) {
  set_has_question();
  if (question_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    question_ = new ::std::string;
  }
  question_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_challenge.question)
}
inline ::std::string* pb_challenge::mutable_question() {
  set_has_question();
  if (question_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    question_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_challenge.question)
  return question_;
}
inline ::std::string* pb_challenge::release_question() {
  clear_has_question();
  if (question_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = question_;
    question_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_challenge::set_allocated_question(::std::string* question) {
  if (question_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete question_;
  }
  if (question) {
    set_has_question();
    question_ = question;
  } else {
    clear_has_question();
    question_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_challenge.question)
}

// optional string answer = 2;
inline bool pb_challenge::has_answer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pb_challenge::set_has_answer() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pb_challenge::clear_has_answer() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pb_challenge::clear_answer() {
  if (answer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    answer_->clear();
  }
  clear_has_answer();
}
inline const ::std::string& pb_challenge::answer() const {
  // @@protoc_insertion_point(field_get:pb_challenge.answer)
  return *answer_;
}
inline void pb_challenge::set_answer(const ::std::string& value) {
  set_has_answer();
  if (answer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    answer_ = new ::std::string;
  }
  answer_->assign(value);
  // @@protoc_insertion_point(field_set:pb_challenge.answer)
}
inline void pb_challenge::set_answer(const char* value) {
  set_has_answer();
  if (answer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    answer_ = new ::std::string;
  }
  answer_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_challenge.answer)
}
inline void pb_challenge::set_answer(const char* value, size_t size) {
  set_has_answer();
  if (answer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    answer_ = new ::std::string;
  }
  answer_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_challenge.answer)
}
inline ::std::string* pb_challenge::mutable_answer() {
  set_has_answer();
  if (answer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    answer_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_challenge.answer)
  return answer_;
}
inline ::std::string* pb_challenge::release_answer() {
  clear_has_answer();
  if (answer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = answer_;
    answer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_challenge::set_allocated_answer(::std::string* answer) {
  if (answer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete answer_;
  }
  if (answer) {
    set_has_answer();
    answer_ = answer;
  } else {
    clear_has_answer();
    answer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_challenge.answer)
}

// -------------------------------------------------------------------

// pb_chain

// optional int32 id = 1;
inline bool pb_chain::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pb_chain::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pb_chain::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pb_chain::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 pb_chain::id() const {
  // @@protoc_insertion_point(field_get:pb_chain.id)
  return id_;
}
inline void pb_chain::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb_chain.id)
}

// optional string state = 2;
inline bool pb_chain::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pb_chain::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pb_chain::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pb_chain::clear_state() {
  if (state_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    state_->clear();
  }
  clear_has_state();
}
inline const ::std::string& pb_chain::state() const {
  // @@protoc_insertion_point(field_get:pb_chain.state)
  return *state_;
}
inline void pb_chain::set_state(const ::std::string& value) {
  set_has_state();
  if (state_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    state_ = new ::std::string;
  }
  state_->assign(value);
  // @@protoc_insertion_point(field_set:pb_chain.state)
}
inline void pb_chain::set_state(const char* value) {
  set_has_state();
  if (state_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    state_ = new ::std::string;
  }
  state_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb_chain.state)
}
inline void pb_chain::set_state(const char* value, size_t size) {
  set_has_state();
  if (state_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    state_ = new ::std::string;
  }
  state_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb_chain.state)
}
inline ::std::string* pb_chain::mutable_state() {
  set_has_state();
  if (state_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    state_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb_chain.state)
  return state_;
}
inline ::std::string* pb_chain::release_state() {
  clear_has_state();
  if (state_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = state_;
    state_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void pb_chain::set_allocated_state(::std::string* state) {
  if (state_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete state_;
  }
  if (state) {
    set_has_state();
    state_ = state;
  } else {
    clear_has_state();
    state_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb_chain.state)
}

// repeated .pb_transaction transaction = 3;
inline int pb_chain::transaction_size() const {
  return transaction_.size();
}
inline void pb_chain::clear_transaction() {
  transaction_.Clear();
}
inline const ::pb_transaction& pb_chain::transaction(int index) const {
  // @@protoc_insertion_point(field_get:pb_chain.transaction)
  return transaction_.Get(index);
}
inline ::pb_transaction* pb_chain::mutable_transaction(int index) {
  // @@protoc_insertion_point(field_mutable:pb_chain.transaction)
  return transaction_.Mutable(index);
}
inline ::pb_transaction* pb_chain::add_transaction() {
  // @@protoc_insertion_point(field_add:pb_chain.transaction)
  return transaction_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb_transaction >&
pb_chain::transaction() const {
  // @@protoc_insertion_point(field_list:pb_chain.transaction)
  return transaction_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb_transaction >*
pb_chain::mutable_transaction() {
  // @@protoc_insertion_point(field_mutable_list:pb_chain.transaction)
  return &transaction_;
}

// optional .pb_challenge challenge = 4;
inline bool pb_chain::has_challenge() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pb_chain::set_has_challenge() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pb_chain::clear_has_challenge() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pb_chain::clear_challenge() {
  if (challenge_ != NULL) challenge_->::pb_challenge::Clear();
  clear_has_challenge();
}
inline const ::pb_challenge& pb_chain::challenge() const {
  // @@protoc_insertion_point(field_get:pb_chain.challenge)
  return challenge_ != NULL ? *challenge_ : *default_instance_->challenge_;
}
inline ::pb_challenge* pb_chain::mutable_challenge() {
  set_has_challenge();
  if (challenge_ == NULL) challenge_ = new ::pb_challenge;
  // @@protoc_insertion_point(field_mutable:pb_chain.challenge)
  return challenge_;
}
inline ::pb_challenge* pb_chain::release_challenge() {
  clear_has_challenge();
  ::pb_challenge* temp = challenge_;
  challenge_ = NULL;
  return temp;
}
inline void pb_chain::set_allocated_challenge(::pb_challenge* challenge) {
  delete challenge_;
  challenge_ = challenge;
  if (challenge) {
    set_has_challenge();
  } else {
    clear_has_challenge();
  }
  // @@protoc_insertion_point(field_set_allocated:pb_chain.challenge)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_chain_2eproto__INCLUDED
